<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSDate(GHUtils).html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSDate</TokenIdentifier>
			<Abstract>Utilities for dates, for time ago in words and date component arithmentic (adding days), tomorrow, yesterday, and more.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>
			
			<NodeRef refid="16"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_addDays:</TokenIdentifier>
			<Abstract>Return new date by adding (or subtracting) days from date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSDate *)gh_addDays:(NSInteger)days</Declaration>
			<Parameters>
				<Parameter>
					<Name>days</Name>
					<Abstract>+/- N days</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Date with days added or subtracted</Abstract></ReturnValue>
			<Anchor>//api/name/gh_addDays:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_beginningOfDay</TokenIdentifier>
			<Abstract>Get normalized date (hours/minutes/seconds) set to 0; Begining of day.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSDate *)gh_beginningOfDay</Declaration>
			
			<ReturnValue><Abstract>Beginning day of current date</Abstract></ReturnValue>
			<Anchor>//api/name/gh_beginningOfDay</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_yesterday</TokenIdentifier>
			<Abstract>Yesterday (beginning of day).</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSDate *)gh_yesterday</Declaration>
			
			<ReturnValue><Abstract>Previous day (beginning)</Abstract></ReturnValue>
			<Anchor>//api/name/gh_yesterday</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_tomorrow</TokenIdentifier>
			<Abstract>Tomorrow (beginning of day).</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSDate *)gh_tomorrow</Declaration>
			
			<ReturnValue><Abstract>Next day (beginning)</Abstract></ReturnValue>
			<Anchor>//api/name/gh_tomorrow</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_isTomorrow</TokenIdentifier>
			<Abstract>Check if date is tomorrow.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_isTomorrow</Declaration>
			
			<ReturnValue><Abstract>YES if tomorrow</Abstract></ReturnValue>
			<Anchor>//api/name/gh_isTomorrow</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_isToday</TokenIdentifier>
			<Abstract>Check if date was or is today.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_isToday</Declaration>
			
			<ReturnValue><Abstract>YES if today</Abstract></ReturnValue>
			<Anchor>//api/name/gh_isToday</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_wasYesterday</TokenIdentifier>
			<Abstract>Check if date was yesterday.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_wasYesterday</Declaration>
			
			<ReturnValue><Abstract>YES if yesterday</Abstract></ReturnValue>
			<Anchor>//api/name/gh_wasYesterday</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_weekday:</TokenIdentifier>
			<Abstract>Get weekday symbol, with special naming for 'Yesterday', 'Today' and 'Tomorrow'.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_weekday:(NSDateFormatter *)formatter</Declaration>
			<Parameters>
				<Parameter>
					<Name>formatter</Name>
					<Abstract>Date formatter, if nil will return nil if not yesterday, today or tomorrow</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>'Yesterday', 'Today' and 'Tomorrow' or weekday symbol for specified formatter</Abstract></ReturnValue>
			<Anchor>//api/name/gh_weekday:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_format:useWeekday:</TokenIdentifier>
			<Abstract>Format date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_format:(NSString *)format useWeekday:(BOOL)useWeekday</Declaration>
			<Parameters>
				<Parameter>
					<Name>format</Name>
					<Abstract>Format</Abstract>
				</Parameter><Parameter>
					<Name>useWeekday</Name>
					<Abstract>If YES, will prepend weekday (or 'Today', 'Tomorrow', 'Yesterday')</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_format:useWeekday:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_dateFromDate:addDay:normalize:</TokenIdentifier>
			<Abstract>Create date from date and add days and/or normalize.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSDate *)gh_dateFromDate:(NSDate *)date addDay:(NSInteger)addDay normalize:(BOOL)normalize</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract>The date to start at</Abstract>
				</Parameter><Parameter>
					<Name>addDay</Name>
					<Abstract>If not 0, will add these number of days to the date.</Abstract>
				</Parameter><Parameter>
					<Name>normalize</Name>
					<Abstract>If YES will set hours, minutes, seconds to 0</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_dateFromDate:addDay:normalize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_dateWithDay:month:year:addDay:addMonth:addYear:timeZone:</TokenIdentifier>
			<Abstract>Create date with day, month, year, and add days, months or years.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSDate *)gh_dateWithDay:(NSInteger)day month:(NSInteger)month year:(NSInteger)year addDay:(NSInteger)addDay addMonth:(NSInteger)addMonth addYear:(NSInteger)addYear timeZone:(NSTimeZone *)timeZone</Declaration>
			<Parameters>
				<Parameter>
					<Name>day</Name>
					<Abstract>Day to set (if 0, uses current day)</Abstract>
				</Parameter><Parameter>
					<Name>month</Name>
					<Abstract>Month to set (if 0, uses current month)</Abstract>
				</Parameter><Parameter>
					<Name>year</Name>
					<Abstract>Year to set (if 0, uses current year)</Abstract>
				</Parameter><Parameter>
					<Name>addDay</Name>
					<Abstract>Days to add</Abstract>
				</Parameter><Parameter>
					<Name>addMonth</Name>
					<Abstract>Month to add</Abstract>
				</Parameter><Parameter>
					<Name>addYear</Name>
					<Abstract>Year to add</Abstract>
				</Parameter><Parameter>
					<Name>timeZone</Name>
					<Abstract>Time zone to use</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Date</Abstract></ReturnValue>
			<Anchor>//api/name/gh_dateWithDay:month:year:addDay:addMonth:addYear:timeZone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_dateWithDay:month:year:timeZone:</TokenIdentifier>
			<Abstract>Create date with day, month, year.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSDate *)gh_dateWithDay:(NSInteger)day month:(NSInteger)month year:(NSInteger)year timeZone:(NSTimeZone *)timeZone</Declaration>
			<Parameters>
				<Parameter>
					<Name>day</Name>
					<Abstract>Day to set (if 0, uses current day)</Abstract>
				</Parameter><Parameter>
					<Name>month</Name>
					<Abstract>Month to set (if 0, uses current month)</Abstract>
				</Parameter><Parameter>
					<Name>year</Name>
					<Abstract>Year to set (if 0, uses current year)</Abstract>
				</Parameter><Parameter>
					<Name>timeZone</Name>
					<Abstract>Time zone</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Date</Abstract></ReturnValue>
			<Anchor>//api/name/gh_dateWithDay:month:year:timeZone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_dateComponentsFromFlags:timeZone:</TokenIdentifier>
			<Abstract>Date components for date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSDateComponents *)gh_dateComponentsFromFlags:(NSUInteger)flags timeZone:(NSTimeZone *)timeZone</Declaration>
			<Parameters>
				<Parameter>
					<Name>flags</Name>
					<Abstract>Flags, e.g. NSMonthCalendarUnit, or NSMonthCalendarUnit | NSYearCalendarUnit</Abstract>
				</Parameter><Parameter>
					<Name>timeZone</Name>
					<Abstract>Time zone</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Date components</Abstract></ReturnValue>
			<Anchor>//api/name/gh_dateComponentsFromFlags:timeZone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_monthSymbols</TokenIdentifier>
			<Abstract>Month symbols, same as standaloneMonthSymbols from NSDateFormatter.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSArray *)gh_monthSymbols</Declaration>
			
			
			<Anchor>//api/name/gh_monthSymbols</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_day</TokenIdentifier>
			<Abstract>Day of date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_day</Declaration>
			
			<ReturnValue><Abstract>Day</Abstract></ReturnValue>
			<Anchor>//api/name/gh_day</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_dayForTimeZone:</TokenIdentifier>
			<Abstract>Day of date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_dayForTimeZone:(NSTimeZone *)timeZone</Declaration>
			<Parameters>
				<Parameter>
					<Name>timeZone</Name>
					<Abstract>Time zone</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Day</Abstract></ReturnValue>
			<Anchor>//api/name/gh_dayForTimeZone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_month</TokenIdentifier>
			<Abstract>Month of date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_month</Declaration>
			
			<ReturnValue><Abstract>Year</Abstract></ReturnValue>
			<Anchor>//api/name/gh_month</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_monthForTimeZone:</TokenIdentifier>
			<Abstract>Month of date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_monthForTimeZone:(NSTimeZone *)timeZone</Declaration>
			<Parameters>
				<Parameter>
					<Name>timeZone</Name>
					<Abstract>Time zone</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Month</Abstract></ReturnValue>
			<Anchor>//api/name/gh_monthForTimeZone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_year</TokenIdentifier>
			<Abstract>Year of date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_year</Declaration>
			
			<ReturnValue><Abstract>Year</Abstract></ReturnValue>
			<Anchor>//api/name/gh_year</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_yearForTimeZone:</TokenIdentifier>
			<Abstract>Year of date.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_yearForTimeZone:(NSTimeZone *)timeZone</Declaration>
			<Parameters>
				<Parameter>
					<Name>timeZone</Name>
					<Abstract>Time zone</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Year</Abstract></ReturnValue>
			<Anchor>//api/name/gh_yearForTimeZone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_timeAgo:</TokenIdentifier>
			<Abstract>Time ago in words.
For more info, especially on localization, see GHNSString+TimeInterval.h.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_timeAgo:(BOOL)includeSeconds</Declaration>
			<Parameters>
				<Parameter>
					<Name>includeSeconds</Name>
					<Abstract>If YES, will include seconds (30 seconds ago), otherwise will say something like 'Less than a minute'</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Time ago in words</Abstract></ReturnValue>
			<Anchor>//api/name/gh_timeAgo:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_millisSince1970</TokenIdentifier>
			<Abstract>Milliseconds since 1970.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (long long)gh_millisSince1970</Declaration>
			
			<ReturnValue><Abstract>Milliseconds since 1970 GMT.</Abstract></ReturnValue>
			<Anchor>//api/name/gh_millisSince1970</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_millisNumberSince1970</TokenIdentifier>
			<Abstract>Milliseconds since 1970 (NSNumber).</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSNumber *)gh_millisNumberSince1970</Declaration>
			
			<ReturnValue><Abstract>Milliseconds since 1970 GMT</Abstract></ReturnValue>
			<Anchor>//api/name/gh_millisNumberSince1970</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_secondsSince1970</TokenIdentifier>
			<Abstract>Seconds since 1970.</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (long long)gh_secondsSince1970</Declaration>
			
			<ReturnValue><Abstract>Seconds since 1970 GMT (rounded)</Abstract></ReturnValue>
			<Anchor>//api/name/gh_secondsSince1970</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDate/gh_secondsNumberSince1970</TokenIdentifier>
			<Abstract>Seconds since 1970 (NSNumber).</Abstract>
			<DeclaredIn>GHNSDate+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSNumber *)gh_secondsNumberSince1970</Declaration>
			
			<ReturnValue><Abstract>Seconds since 1970 GMT (rounded)</Abstract></ReturnValue>
			<Anchor>//api/name/gh_secondsNumberSince1970</Anchor>
		</Token>
		
	</File>
</Tokens>