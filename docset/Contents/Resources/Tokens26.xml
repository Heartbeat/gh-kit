<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSObject(GHInvocation_GHKIT).html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSObject</TokenIdentifier>
			<Abstract>Adds performSelector methods that take a nil-terminated variable argument list,
for when you need to pass more arguments to performSelector.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>
			
			<NodeRef refid="26"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performIfRespondsToSelector:</TokenIdentifier>
			<Abstract>Perform selector if responds.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_performIfRespondsToSelector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>nil if we don't respond to the selector, otherwise the selector result</Abstract></ReturnValue>
			<Anchor>//api/name/gh_performIfRespondsToSelector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performIfRespondsToSelector:withObjects:</TokenIdentifier>
			<Abstract>Perform selector if responds with multiple arguments.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_performIfRespondsToSelector:(SEL)selector withObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>withObjects</Name>
					<Abstract>nil terminated variable argument list</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>nil if we don't respond to the selector, otherwise the selector result</Abstract></ReturnValue>
			<Anchor>//api/name/gh_performIfRespondsToSelector:withObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelector:withObjects:</TokenIdentifier>
			<Abstract>Invoke selector with arguments.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_performSelector:(SEL)selector withObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>withObjects</Name>
					<Abstract>nil terminated variable argument list</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelector:withObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelector:afterDelay:withObjects:</TokenIdentifier>
			<Abstract>Invoke selector after delay with arguments.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_performSelector:(SEL)selector afterDelay:(NSTimeInterval)delay withObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>delay</Name>
					<Abstract>Delay in seconds</Abstract>
				</Parameter><Parameter>
					<Name>withObjects</Name>
					<Abstract>nil terminated variable argument list</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelector:afterDelay:withObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelectorOnMainThread:withObjects:</TokenIdentifier>
			<Abstract>Invoke selector with arguments on main thread.
Does not wait until selector is finished.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (void)gh_performSelectorOnMainThread:(SEL)selector withObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>withObjects</Name>
					<Abstract>nil terminated variable argument list</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelectorOnMainThread:withObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelectorOnMainThread:waitUntilDone:withObjects:</TokenIdentifier>
			<Abstract>Invoke selector with arguments on main thread.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (void)gh_performSelectorOnMainThread:(SEL)selector waitUntilDone:(BOOL)waitUntilDone withObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilDone</Name>
					<Abstract>Whether to join on selector and wait for it to finish.</Abstract>
				</Parameter><Parameter>
					<Name>withObjects</Name>
					<Abstract>nil terminated variable argument list</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelectorOnMainThread:waitUntilDone:withObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelector:onMainThread:waitUntilDone:withObjects:</TokenIdentifier>
			<Abstract>Invoke selector with arguments.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (void)gh_performSelector:(SEL)selector onMainThread:(BOOL)onMainThread waitUntilDone:(BOOL)waitUntilDone withObjects</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>onMainThread</Name>
					<Abstract>Whether to perform on main thread or current thread</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilDone</Name>
					<Abstract>Whether to join on selector and wait for it to finish.</Abstract>
				</Parameter><Parameter>
					<Name>withObjects</Name>
					<Abstract>nil terminated variable argument list</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelector:onMainThread:waitUntilDone:withObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelector:onMainThread:waitUntilDone:arguments:</TokenIdentifier>
			<Abstract>Invoke selector with arguments.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (void)gh_performSelector:(SEL)selector onMainThread:(BOOL)onMainThread waitUntilDone:(BOOL)waitUntilDone arguments:(NSArray *)arguments</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>onMainThread</Name>
					<Abstract>Whether to perform on main thread or current thread</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilDone</Name>
					<Abstract>Whether to join on selector and wait for it to finish.</Abstract>
				</Parameter><Parameter>
					<Name>arguments</Name>
					<Abstract>List of arguments</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelector:onMainThread:waitUntilDone:arguments:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_performSelector:onMainThread:waitUntilDone:afterDelay:arguments:</TokenIdentifier>
			<Abstract>Invoke selector with arguments after delay.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (void)gh_performSelector:(SEL)selector onMainThread:(BOOL)onMainThread waitUntilDone:(BOOL)waitUntilDone afterDelay:(NSTimeInterval)delay arguments:(NSArray *)arguments</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter><Parameter>
					<Name>onMainThread</Name>
					<Abstract>Whether to perform on main thread or current thread</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilDone</Name>
					<Abstract>Whether to join on selector and wait for it to finish.</Abstract>
				</Parameter><Parameter>
					<Name>arguments</Name>
					<Abstract>List of arguments</Abstract>
				</Parameter><Parameter>
					<Name>afterDelay</Name>
					<Abstract>Delay in seconds</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_performSelector:onMainThread:waitUntilDone:afterDelay:arguments:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_proxyOnMainThread</TokenIdentifier>
			<Abstract>Proxy for invoking on main thread (without waiting until done).</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_proxyOnMainThread</Declaration>
			
			<ReturnValue><Abstract>Proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_proxyOnMainThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_proxyOnMainThread:</TokenIdentifier>
			<Abstract>Proxy for invoking on main thread.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_proxyOnMainThread:(BOOL)waitUntilDone</Declaration>
			<Parameters>
				<Parameter>
					<Name>waitUntilDone</Name>
					<Abstract>Whether to block until call is finished</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_proxyOnMainThread:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_proxyOnThread:</TokenIdentifier>
			<Abstract>Proxy on thread (without blocking until done).</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_proxyOnThread:(NSThread *)thread</Declaration>
			<Parameters>
				<Parameter>
					<Name>thread</Name>
					<Abstract>Thread to invoke on</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_proxyOnThread:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_proxyOnThread:waitUntilDone:</TokenIdentifier>
			<Abstract>Proxy for invoking on thread.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_proxyOnThread:(NSThread *)thread waitUntilDone:(BOOL)waitUntilDone</Declaration>
			<Parameters>
				<Parameter>
					<Name>thread</Name>
					<Abstract>Thread to invoke on</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilDone</Name>
					<Abstract>Whether to block until call is finished</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_proxyOnThread:waitUntilDone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_proxyAfterDelay:</TokenIdentifier>
			<Abstract>Proxy for invoking after delay.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_proxyAfterDelay:(NSTimeInterval)delay</Declaration>
			<Parameters>
				<Parameter>
					<Name>delay</Name>
					<Abstract>Time (in seconds) to wait before calling.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_proxyAfterDelay:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_argumentProxy:</TokenIdentifier>
			<Abstract>Proxy for selector.
For calling a selector with any type and number of arguments.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_argumentProxy:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract>Selector</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_argumentProxy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_argumentProxy:onMainThread:waitUntilDone:</TokenIdentifier>
			<Abstract>Proxy for selector on main thread.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_argumentProxy:(SEL)selector onMainThread:(BOOL)onMainThread waitUntilDone:(BOOL)waitUntilDone</Declaration>
			
			
			<Anchor>//api/name/gh_argumentProxy:onMainThread:waitUntilDone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_logProxy</TokenIdentifier>
			<Abstract>Special logging proxy; In progress.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_logProxy</Declaration>
			
			
			<Anchor>//api/name/gh_logProxy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/gh_proxyDetachThreadWithCallback:action:context:</TokenIdentifier>
			<Abstract>Proxy call on new thread.
Calls are responsible for setting up their own NSAutoreleasePool's.</Abstract>
			<DeclaredIn>GHNSObject+Invocation.h</DeclaredIn>			
			
			<Declaration>- (id)gh_proxyDetachThreadWithCallback:(id)target action:(SEL)action context:(id)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract>Callback target</Abstract>
				</Parameter><Parameter>
					<Name>action</Name>
					<Abstract>Callback action</Abstract>
				</Parameter><Parameter>
					<Name>context</Name>
					<Abstract>Callback argument</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>proxy</Abstract></ReturnValue>
			<Anchor>//api/name/gh_proxyDetachThreadWithCallback:action:context:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject/_initProxy</TokenIdentifier>
			<Abstract>TODO(gabe): Possible to detect if we are nesting proxy calls?</Abstract>
			<DeclaredIn>GHNSObject+Invocation.m</DeclaredIn>			
			
			<Declaration>- (GHNSInvocationProxy *)_initProxy</Declaration>
			
			
			<Anchor>//api/name/_initProxy</Anchor>
		</Token>
		
	</File>
</Tokens>