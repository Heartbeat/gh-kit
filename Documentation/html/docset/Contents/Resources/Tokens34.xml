<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSString(GHUtils).html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSString</TokenIdentifier>
			<Abstract>Utilities for strings, for example, stripping, reversing, counting, UUID, MD5 and more.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>
			
			<NodeRef refid="34"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_stringWithFormat:arguments:</TokenIdentifier>
			<Abstract>Create string with format from array of arguments.
Arguments must be objective-c objects.
WARNING: This assumption seems totally dangerous.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>+ (id)gh_stringWithFormat:(NSString *)format arguments:(NSArray *)arguments</Declaration>
			<Parameters>
				<Parameter>
					<Name>format</Name>
					<Abstract>Format</Abstract>
				</Parameter><Parameter>
					<Name>arguments</Name>
					<Abstract>Arguments</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_stringWithFormat:arguments:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_isBlank</TokenIdentifier>
			<Abstract>Check if string is blank.
If instance is nil the would NOOP and evaluate to falsy, so
you should use [NSString gh_isBlank:str] instead.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_isBlank</Declaration>
			
			<ReturnValue><Abstract>YES if string is empty (after stripping)</Abstract></ReturnValue>
			<Anchor>//api/name/gh_isBlank</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_isEqualIgnoreCase:</TokenIdentifier>
			<Abstract>Check if equals ignoring case.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_isEqualIgnoreCase:(NSString *)s</Declaration>
			<Parameters>
				<Parameter>
					<Name>s</Name>
					<Abstract>String</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>True if equal regardless of case</Abstract></ReturnValue>
			<Anchor>//api/name/gh_isEqualIgnoreCase:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_strip</TokenIdentifier>
			<Abstract>Strip whitespace from left and right side of string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_strip</Declaration>
			
			<ReturnValue><Abstract>String with characters trimmed</Abstract></ReturnValue>
			<Anchor>//api/name/gh_strip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_rightStrip</TokenIdentifier>
			<Abstract>Trim whitespace from right side only.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_rightStrip</Declaration>
			
			
			<Anchor>//api/name/gh_rightStrip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_leftStrip</TokenIdentifier>
			<Abstract>Trim white space from left side only.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_leftStrip</Declaration>
			
			
			<Anchor>//api/name/gh_leftStrip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_reverse</TokenIdentifier>
			<Abstract>Reverse the string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_reverse</Declaration>
			
			<ReturnValue><Abstract>Reversed</Abstract></ReturnValue>
			<Anchor>//api/name/gh_reverse</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_count:</TokenIdentifier>
			<Abstract>Count the number of times a string appears.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)gh_count:(NSString *)s</Declaration>
			<Parameters>
				<Parameter>
					<Name>s</Name>
					<Abstract>String</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Number of times it appears</Abstract></ReturnValue>
			<Anchor>//api/name/gh_count:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_isBlank:</TokenIdentifier>
			<Abstract>Check if string is blank.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)gh_isBlank:(NSString *)s</Declaration>
			<Parameters>
				<Parameter>
					<Name>s</Name>
					<Abstract>String</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if string is nil, empty or whitespace characters</Abstract></ReturnValue>
			<Anchor>//api/name/gh_isBlank:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_truncateMiddle</TokenIdentifier>
			<Abstract>Create attributed string that truncates in the middle.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSAttributedString *)gh_truncateMiddle</Declaration>
			
			<ReturnValue><Abstract>Attributed string that truncates in the middle.</Abstract></ReturnValue>
			<Anchor>//api/name/gh_truncateMiddle</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_mimeTypeForExtension</TokenIdentifier>
			<Abstract>Get mime type for extension.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_mimeTypeForExtension</Declaration>
			
			<ReturnValue><Abstract>Mime type for extension</Abstract></ReturnValue>
			<Anchor>//api/name/gh_mimeTypeForExtension</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_containsCharacters:</TokenIdentifier>
			<Abstract>Check if string contains ANY characters from a string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_containsCharacters:(NSString *)characters</Declaration>
			<Parameters>
				<Parameter>
					<Name>characters</Name>
					<Abstract>String representing characters to check for</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES If string contains characters</Abstract></ReturnValue>
			<Anchor>//api/name/gh_containsCharacters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_containsAny:</TokenIdentifier>
			<Abstract>Check if string contains ANY characters from a set.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_containsAny:(NSCharacterSet *)charSet</Declaration>
			<Parameters>
				<Parameter>
					<Name>charSet</Name>
					<Abstract>Char set</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES If string contains any characters</Abstract></ReturnValue>
			<Anchor>//api/name/gh_containsAny:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_only:</TokenIdentifier>
			<Abstract>Check if string contains only characters from a set.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_only:(NSCharacterSet *)charSet</Declaration>
			<Parameters>
				<Parameter>
					<Name>charSet</Name>
					<Abstract>Character set</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES If string contains only these characters</Abstract></ReturnValue>
			<Anchor>//api/name/gh_only:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_startsWithAny:</TokenIdentifier>
			<Abstract>Check if string starts with any of the character set.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_startsWithAny:(NSCharacterSet *)charSet</Declaration>
			<Parameters>
				<Parameter>
					<Name>charSet</Name>
					<Abstract>Character set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/gh_startsWithAny:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_startsWith:</TokenIdentifier>
			<Abstract>Check if string starts with a string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_startsWith:(NSString *)startsWith</Declaration>
			<Parameters>
				<Parameter>
					<Name>startsWith</Name>
					<Abstract>String to check</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if string starts with string</Abstract></ReturnValue>
			<Anchor>//api/name/gh_startsWith:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_startsWith:options:</TokenIdentifier>
			<Abstract>Check if string starts with a string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_startsWith:(NSString *)startsWith options:(NSStringCompareOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>startsWith</Name>
					<Abstract>String to check</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract>Compare options</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if string starts with string</Abstract></ReturnValue>
			<Anchor>//api/name/gh_startsWith:options:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_endsWith:options:</TokenIdentifier>
			<Abstract>Check if string ends with a string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_endsWith:(NSString *)endsWith options:(NSStringCompareOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>endsWith</Name>
					<Abstract>String to check</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract>Compare options</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if string ends with string</Abstract></ReturnValue>
			<Anchor>//api/name/gh_endsWith:options:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_contains:options:</TokenIdentifier>
			<Abstract>Check if self contains the specified string with options</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gh_contains:(NSString *)contains options:(NSStringCompareOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>contains</Name>
					<Abstract>String to look for</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract>Options</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if string has the substring</Abstract></ReturnValue>
			<Anchor>//api/name/gh_contains:options:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_attributize</TokenIdentifier>
			<Abstract>Turn string into attribute.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_attributize</Declaration>
			
			<ReturnValue><Abstract>With first letter lower-cased</Abstract></ReturnValue>
			<Anchor>//api/name/gh_attributize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_fullPathExtension</TokenIdentifier>
			<Abstract>Path extension with . or "" as before.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_fullPathExtension</Declaration>
			
			<ReturnValue><Abstract>Full path extension with .</Abstract></ReturnValue>
			<Anchor>//api/name/gh_fullPathExtension</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_characterSetsUnion:</TokenIdentifier>
			<Abstract>Combine character sets.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSMutableCharacterSet *)gh_characterSetsUnion:(NSArray *)characterSets</Declaration>
			
			<ReturnValue><Abstract>Combined character sets</Abstract></ReturnValue>
			<Anchor>//api/name/gh_characterSetsUnion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_uuid</TokenIdentifier>
			<Abstract>Create UUID.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)gh_uuid</Declaration>
			
			<ReturnValue><Abstract>UUID</Abstract></ReturnValue>
			<Anchor>//api/name/gh_uuid</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_lastSplitWithString:options:</TokenIdentifier>
			<Abstract>Get last part of string separated by the specified string.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_lastSplitWithString:(NSString *)s options:(NSStringCompareOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>s</Name>
					<Abstract>String to split on</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract>Options</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Last part of string split by string. If no string is found, returns self.</Abstract></ReturnValue>
			<Anchor>//api/name/gh_lastSplitWithString:options:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_componentsSeparatedByString:include:</TokenIdentifier>
			<Abstract>Components separated by string with option to include separator.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)gh_componentsSeparatedByString:(NSString *)s include:(BOOL)include</Declaration>
			<Parameters>
				<Parameter>
					<Name>s</Name>
					<Abstract>String to separate</Abstract>
				</Parameter><Parameter>
					<Name>include</Name>
					<Abstract>Whether to include separator</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Components</Abstract></ReturnValue>
			<Anchor>//api/name/gh_componentsSeparatedByString:include:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_substringSegmentsWithinStart:end:</TokenIdentifier>
			<Abstract>Break string into segments based on start and end token.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)gh_substringSegmentsWithinStart:(NSString *)start end:(NSString *)end</Declaration>
			<Parameters>
				<Parameter>
					<Name>start</Name>
					<Abstract>Start token</Abstract>
				</Parameter><Parameter>
					<Name>end</Name>
					<Abstract>End token</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Array of GHNSStringSegment's</Abstract></ReturnValue>
			<Anchor>//api/name/gh_substringSegmentsWithinStart:end:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_rot13</TokenIdentifier>
			<Abstract>Rot13.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_rot13</Declaration>
			
			
			<Anchor>//api/name/gh_rot13</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString/gh_MD5</TokenIdentifier>
			<Abstract>MD5.</Abstract>
			<DeclaredIn>GHNSString+Utils.h</DeclaredIn>			
			
			<Declaration>- (NSString *)gh_MD5</Declaration>
			
			
			<Anchor>//api/name/gh_MD5</Anchor>
		</Token>
		
	</File>
</Tokens>